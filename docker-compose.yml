version: "3.9"

networks:
  echo_net:
    driver: bridge

services:
  # ----------  Database  ----------
  db:
    image: postgres:15-alpine
    container_name: echo_db
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [echo_net]

  # ----------  Backend API  ----------
  backend:
    build:
      context: ./be
      dockerfile: Dockerfile
    container_name: echo_backend
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${PGUSER}
      DB_PASS: ${PGPASSWORD}
      DB_NAME: ${PGDATABASE}
      FRONTEND_URL: https://yourdomain.com           # CORS allow‑list
      PORT: 5001
    expose: ["5001"]
    networks: [echo_net]

  # ----------  Frontend (static build) ----------
  frontend:
    build:
      context: ./fe
      dockerfile: Dockerfile
      target: prod          # see FE Dockerfile below
    container_name: echo_frontend
    depends_on: [backend]
    expose: ["80"]
    networks: [echo_net]

  # ----------  Public reverse‑proxy ----------
  nginx:
    image: nginx:alpine
    container_name: echo_nginx
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    networks: [echo_net]
    restart: always

  # ----------  Automated Let’s Encrypt renewal ----------
  certbot:
    image: certbot/certbot:latest
    container_name: echo_certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: >
      sh -c "trap exit TERM;
             while :; do
               certbot renew --webroot -w /var/www/certbot --quiet;
               sleep 12h;
             done"
    networks: [echo_net]
    restart: always

volumes:
  pgdata:
