// be/src/services/contributingGuideGenerator.ts
import axios from 'axios';
import { commitFileToGithub } from './githubCommitService'; // <--- IMPORT THE NEW SERVICE

const OPENAI_API_KEY = process.env.GPT_API_KEY;

interface FileData {
    path: string;
    content: string;
}

const CONTRIBUTION_HINT_FILES = [ /* ... your list of hint files ... */
    'package.json', 'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml',
    'requirements.txt', 'Pipfile', 'poetry.lock', 'pyproject.toml',
    'Gemfile', 'Gemfile.lock', 'composer.json', 'composer.lock',
    'pom.xml', 'build.gradle', 'Makefile', 'Dockerfile', 'docker-compose.yml',
    '.eslintrc.js', '.eslintrc.json', '.eslintrc.yaml', '.prettierrc.js', '.prettierrc.json',
    '.github/workflows/', 'CONTRIBUTING.md', 'README.md'
];


// Modified return type
export async function generateContributingGuide(
    repoFullName: string,
    githubToken: string,
    branch: string
): Promise<{
    success: boolean;
    message: string;
    markdownContent: string; // Still return content for saving in Echo DB
    githubCommitUrl?: string;
    githubFileUrl?: string;
    error?: string;
}> {
    const [owner, repo] = repoFullName.split('/');
    console.log(`[Contrib Guide] Starting for ${repoFullName}, branch ${branch}`);

    // ... (Steps to fetch hint files remain the same as in your previous version)
    let fetchedFileContents: FileData[] = [];
    for (const filePathPattern of CONTRIBUTION_HINT_FILES) {
        if (filePathPattern.endsWith('/')) {
            try {
                const treeRes = await axios.get(
                    `https://api.github.com/repos/${owner}/${repo}/contents/${filePathPattern}?ref=${branch}`,
                    { headers: { Authorization: `Bearer ${githubToken}` } }
                );
                if (Array.isArray(treeRes.data)) {
                    for (const item of treeRes.data) {
                        if (item.type === 'file' && item.download_url) {
                            try {
                                const fileRes = await axios.get(item.download_url, { headers: { Authorization: `Bearer ${githubToken}` } });
                                fetchedFileContents.push({ path: item.path, content: fileRes.data.toString() });
                            } catch {}
                        }
                    }
                }
            } catch {}
        } else {
            try {
                const url = `https://api.github.com/repos/${owner}/${repo}/contents/${filePathPattern}?ref=${branch}`;
                const r = await axios.get(url, { headers: { Authorization: `Bearer ${githubToken}` }});
                if (r.data.content) {
                    fetchedFileContents.push({
                        path: filePathPattern,
                        content: Buffer.from(r.data.content, 'base64').toString('utf-8'),
                    });
                }
            } catch {}
        }
    }

    if (fetchedFileContents.length === 0) {
        const noHintsMessage = "Could not find relevant files to infer contribution guidelines.";
        return { success: false, message: noHintsMessage, markdownContent: `# Contributing to ${repoFullName}\n\n${noHintsMessage}`, error: "No hint files found" };
    }

    const generatedMarkdown = await openaiGenerateContributingGuide(repoFullName, fetchedFileContents);

    if (generatedMarkdown.startsWith("# Contributing to") && generatedMarkdown.includes("Error generating")) {
        return { success: false, message: "Failed to generate content via OpenAI.", markdownContent: generatedMarkdown, error: "OpenAI generation failed" };
    }

    // Commit the generated CONTRIBUTING.md to the user's repository
    const targetFilePath = "CONTRIBUTING.md";
    const commitMessage = `feat: Add/Update CONTRIBUTING.md generated by EchoDocs`;

    console.log(`[Contrib Guide] Attempting to commit ${targetFilePath} to ${repoFullName} on branch ${branch}`);
    const commitResult = await commitFileToGithub(
        repoFullName,
        githubToken,
        branch,
        targetFilePath,
        generatedMarkdown,
        commitMessage
    );

    if (commitResult.success) {
        console.log(`[Contrib Guide] Successfully committed ${targetFilePath}. URL: ${commitResult.html_url}`);
        return {
            success: true,
            message: `Successfully generated and committed ${targetFilePath} to your repository.`,
            markdownContent: generatedMarkdown,
            githubFileUrl: commitResult.html_url,
            githubCommitUrl: commitResult.commit_url,
        };
    } else {
        console.error(`[Contrib Guide] Failed to commit ${targetFilePath}: ${commitResult.error}`);
        return {
            success: false,
            message: `Generated contributing guide, but failed to commit to GitHub: ${commitResult.error}`,
            markdownContent: generatedMarkdown, // Still provide content
            error: `GitHub commit failed: ${commitResult.error}`,
        };
    }
}

// openaiGenerateContributingGuide helper function remains the same
async function openaiGenerateContributingGuide(repoFullName: string, filesData: FileData[]): Promise<string> {
    if (!OPENAI_API_KEY) throw new Error("OpenAI API key is not configured.");
    const relevantFileSnippets = filesData.map(f =>
        `File: ${f.path}\n\`\`\`\n${f.content.substring(0, 1500)}...\n\`\`\`\n(Content might be truncated if too long)`
    ).join('\n\n');

    try {
        const res = await axios.post( /* ... OpenAI API call as before ... */
            'https://api.openai.com/v1/chat/completions',
            {
                model: 'gpt-4o-mini',
                messages: [
                    {
                        role: 'system',
                        content: `You are a helpful assistant that writes CONTRIBUTING.md files for open-source projects.
Based on the provided file snippets (like package.json, Dockerfile, CI workflows, README), generate a comprehensive CONTRIBUTING.md.
It should typically include sections like:
- Project Setup (how to install dependencies, set up the environment)
- Running Tests (commands to run tests)
- Code Style/Linting (any linters or formatters used and how to run them)
- Submitting Changes (e.g., fork, branch, make PRs, conventional commits if discernible)
- (Optional) Code of Conduct (if not found, suggest adding a standard one like Contributor Covenant)
- (Optional) How to Report Bugs or Request Features.
Infer as much as possible from the files. If information for a section isn't available, state that or make a sensible generic suggestion.
Format the output in Markdown. Start with a title like "# Contributing to ${repoFullName}".`,
                    },
                    {
                        role: 'user',
                        content: `Repository: ${repoFullName}\n\nHere are snippets from relevant files:\n\n${relevantFileSnippets}`,
                    },
                ],
                max_tokens: 2000,
                temperature: 0.3,
            },
            { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } }
        );
        return res.data.choices[0].message.content.trim();
    } catch (e: any) {
        console.error(`[Contrib Guide] OpenAI API error: ${e.message}`);
        return `# Contributing to ${repoFullName}\n\nError generating contribution guidelines via OpenAI: ${e.message}.`;
    }
}